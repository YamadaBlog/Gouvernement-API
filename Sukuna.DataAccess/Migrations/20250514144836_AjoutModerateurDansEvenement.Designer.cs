// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sukuna.DataAccess.Data;

#nullable disable

namespace Sukuna.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250514144836_AjoutModerateurDansEvenement")]
    partial class AjoutModerateurDansEvenement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sukuna.Common.Models.Badge", b =>
                {
                    b.Property<int>("IdBadge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBadge"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("IdBadge");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Commentaire", b =>
                {
                    b.Property<int>("IdCommentaire")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCommentaire"));

                    b.Property<string>("Contenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEvenement")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilisateur")
                        .HasColumnType("int");

                    b.HasKey("IdCommentaire");

                    b.HasIndex("IdEvenement");

                    b.HasIndex("IdUtilisateur");

                    b.ToTable("Commentaires");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Evenement", b =>
                {
                    b.Property<int>("IdEvenement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEvenement"));

                    b.Property<string>("Accessibilite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Etat")
                        .HasColumnType("int");

                    b.Property<int?>("IdBadge")
                        .HasColumnType("int");

                    b.Property<int?>("IdModerateur")
                        .HasColumnType("int");

                    b.Property<int>("IdOrganisateur")
                        .HasColumnType("int");

                    b.Property<string>("Lieu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NombreParticipantsMax")
                        .HasColumnType("int");

                    b.Property<int>("NombreParticipantsMin")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEvenement");

                    b.HasIndex("IdBadge");

                    b.HasIndex("IdModerateur");

                    b.HasIndex("IdOrganisateur");

                    b.ToTable("Evenements");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdBadge")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilisateur")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdBadge");

                    b.HasIndex("IdUtilisateur");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Participation", b =>
                {
                    b.Property<int>("IdParticipation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdParticipation"));

                    b.Property<DateTime>("DateParticipation")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEvenement")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilisateur")
                        .HasColumnType("int");

                    b.Property<string>("RoleParticipation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdParticipation");

                    b.HasIndex("IdEvenement");

                    b.HasIndex("IdUtilisateur");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Ressource", b =>
                {
                    b.Property<int>("IdRessource")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRessource"));

                    b.Property<string>("Contenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCreateur")
                        .HasColumnType("int");

                    b.Property<int>("IdEvenement")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRessource");

                    b.HasIndex("IdCreateur");

                    b.HasIndex("IdEvenement");

                    b.ToTable("Ressources");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Statistique", b =>
                {
                    b.Property<int>("IdStat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStat"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEvenement")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilisateur")
                        .HasColumnType("int");

                    b.HasKey("IdStat");

                    b.HasIndex("IdEvenement");

                    b.HasIndex("IdUtilisateur");

                    b.ToTable("Statistiques");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Utilisateur", b =>
                {
                    b.Property<int>("IdUtilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUtilisateur"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotDePasse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUtilisateur");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Commentaire", b =>
                {
                    b.HasOne("Sukuna.Common.Models.Evenement", "Evenement")
                        .WithMany("Commentaires")
                        .HasForeignKey("IdEvenement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sukuna.Common.Models.Utilisateur", "Utilisateur")
                        .WithMany("Commentaires")
                        .HasForeignKey("IdUtilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evenement");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Evenement", b =>
                {
                    b.HasOne("Sukuna.Common.Models.Badge", "Badge")
                        .WithMany("Evenements")
                        .HasForeignKey("IdBadge")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sukuna.Common.Models.Utilisateur", "Moderateur")
                        .WithMany("EvenementsValides")
                        .HasForeignKey("IdModerateur")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sukuna.Common.Models.Utilisateur", "Organisateur")
                        .WithMany("EvenementsOrganises")
                        .HasForeignKey("IdOrganisateur")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("Moderateur");

                    b.Navigation("Organisateur");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Interaction", b =>
                {
                    b.HasOne("Sukuna.Common.Models.Badge", "Badge")
                        .WithMany("Interactions")
                        .HasForeignKey("IdBadge")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sukuna.Common.Models.Utilisateur", "Utilisateur")
                        .WithMany("Interactions")
                        .HasForeignKey("IdUtilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Participation", b =>
                {
                    b.HasOne("Sukuna.Common.Models.Evenement", "Evenement")
                        .WithMany("Participations")
                        .HasForeignKey("IdEvenement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sukuna.Common.Models.Utilisateur", "Utilisateur")
                        .WithMany("Participations")
                        .HasForeignKey("IdUtilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evenement");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Ressource", b =>
                {
                    b.HasOne("Sukuna.Common.Models.Utilisateur", "Createur")
                        .WithMany("RessourcesCreees")
                        .HasForeignKey("IdCreateur")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sukuna.Common.Models.Evenement", "Evenement")
                        .WithMany("Ressources")
                        .HasForeignKey("IdEvenement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Createur");

                    b.Navigation("Evenement");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Statistique", b =>
                {
                    b.HasOne("Sukuna.Common.Models.Evenement", "Evenement")
                        .WithMany("Statistiques")
                        .HasForeignKey("IdEvenement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sukuna.Common.Models.Utilisateur", "Utilisateur")
                        .WithMany("Statistiques")
                        .HasForeignKey("IdUtilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evenement");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Badge", b =>
                {
                    b.Navigation("Evenements");

                    b.Navigation("Interactions");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Evenement", b =>
                {
                    b.Navigation("Commentaires");

                    b.Navigation("Participations");

                    b.Navigation("Ressources");

                    b.Navigation("Statistiques");
                });

            modelBuilder.Entity("Sukuna.Common.Models.Utilisateur", b =>
                {
                    b.Navigation("Commentaires");

                    b.Navigation("EvenementsOrganises");

                    b.Navigation("EvenementsValides");

                    b.Navigation("Interactions");

                    b.Navigation("Participations");

                    b.Navigation("RessourcesCreees");

                    b.Navigation("Statistiques");
                });
#pragma warning restore 612, 618
        }
    }
}
